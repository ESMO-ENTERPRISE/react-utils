"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2466],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=c(t),y=o,m=p["".concat(u,".").concat(y)]||p[y]||l[y]||i;return t?r.createElement(m,s(s({ref:n},d),{},{components:t})):r.createElement(m,s({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=y;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a[p]="string"==typeof e?e:o,s[1]=a;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},2658:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const i={sidebar_position:6},s="Dependent Queries",a={unversionedId:"query/dependent-queries",id:"query/dependent-queries",title:"Dependent Queries",description:"Dependent (or serial) queries refer to a situation in which the execution of one query",source:"@site/docs/query/dependent-queries.md",sourceDirName:"query",slug:"/query/dependent-queries",permalink:"/react-utils/docs/query/dependent-queries",draft:!1,editUrl:"https://github.com/ESMO-ENTERPRISE/react-utils/tree/main/docs/query/dependent-queries.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Paginated or Infinite Query",permalink:"/react-utils/docs/query/paginated-infinite-query"},next:{title:"Initial Query Data (SSR/SSG)",permalink:"/react-utils/docs/query/initial-query-data"}},u={},c=[],d={toc:c},p="wrapper";function l(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dependent-queries"},"Dependent Queries"),(0,o.kt)("p",null,"Dependent (or serial) queries refer to a situation in which the execution of one query\nis dependent on the result of another query or dependent on a certain condition."),(0,o.kt)("p",null,"Example, fetch pokemon detail data only if a pokemon selected:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{4}","{4}":!0},"const usePokemonDetailQuery = createQuery(\n  getPokemonByName,\n  {\n    enabled: ({ pokemonName }) => !!pokemonName,\n    //          ^store key\n  }\n);\n\nfunction PokemonsPage() {\n  const [currentPokemon, setCurrentPokemon] = useState(); // Initially no pokemon is selected\n\n  const { isSuccess, data } = usePokemonQuery({ pokemonName: currentPokemon });\n  //                                            ^store key\n\n  return (\n    <main>\n      {isSuccess ? (\n        <section>\n          <h1>{data.name}</h1>\n          <div>Weight: {data.weight}</div>\n        </section>\n      ) : (\n        <div>Loading...</div>\n      )}\n\n      <PokemonList onSelectPokemon={setCurrentPokemon} />\n    </main>\n  );\n}\n")),(0,o.kt)("p",null,"Another example, we build a nested dropdown menu:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const useCountriesQuery = createQuery(getCountries);\nconst useProvincesQuery = createQuery(getProvinces, { enabled: ({ countryId }) => !!countryId });\nconst useCitiesQuery = createQuery(getCities, { enabled: ({ provinceId }) => !!provinceId });\n\nfunction AddressForm() {\n  const [country, setCountry] = useState();\n  const [province, setProvince] = useState();\n  const [city, setCity] = useState();\n\n  const queryCountries = useCountriesQuery();\n  const queryProvinces = useProvincesQuery({ countryId: country?.id });\n  const queryCities = useCitiesQuery({ provinceId: province?.id });\n\n  return (\n    <div>\n      <Dropdown\n        onChange={setCountry}\n        options={queryCountries.data}\n        isLoading={!queryCountries.isSuccess}\n      />\n      <Dropdown\n        onChange={setProvince}\n        options={queryProvinces.data}\n        isLoading={!queryProvinces.isSuccess}\n        disabled={!country}\n      />\n      <Dropdown\n        onChange={setCity}\n        options={queryCities.data}\n        isLoading={!queryCities.isSuccess}\n        disabled={!province}\n      />\n    </div>\n  )\n}\n")))}l.isMDXComponent=!0}}]);