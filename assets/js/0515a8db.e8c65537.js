"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5528],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=s.createContext({}),u=function(e){var t=s.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=u(e.components);return s.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},g=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(n),g=r,m=d["".concat(c,".").concat(g)]||d[g]||p[g]||o;return n?s.createElement(m,a(a({ref:t},l),{},{components:n})):s.createElement(m,a({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=g;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:r,a[1]=i;for(var u=2;u<o;u++)a[u]=n[u];return s.createElement.apply(null,a)}return s.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8375:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var s=n(7462),r=(n(7294),n(3905));const o={sidebar_position:9},a="Stores",i={unversionedId:"store/stores",id:"store/stores",title:"Stores",description:"The concept is same as store, but this can be used for multiple stores.",source:"@site/docs/store/stores.md",sourceDirName:"store",slug:"/store/stores",permalink:"/react-utils/docs/store/stores",draft:!1,editUrl:"https://github.com/ESMO-ENTERPRISE/react-utils/tree/main/docs/store/stores.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"With Immer",permalink:"/react-utils/docs/store/with-immer"},next:{title:"Stores Event",permalink:"/react-utils/docs/store/stores-event"}},c={},u=[{value:"Create a Stores",id:"create-a-stores",level:2},{value:"Using a Stores as Hook",id:"using-a-stores-as-hook",level:2},{value:"Using Store Outside Component",id:"using-store-outside-component",level:2},{value:"Stores Methods",id:"stores-methods",level:2},{value:"Store Key",id:"store-key",level:2}],l={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,s.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"stores"},"Stores"),(0,r.kt)("p",null,"The concept is same as ",(0,r.kt)("a",{parentName:"p",href:"/docs/store/introduction"},"store"),", but this can be used for multiple stores."),(0,r.kt)("h2",{id:"create-a-stores"},"Create a Stores"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStores } from '@esmo/react-utils';\n\nconst useCatStores = createStores(\n  ({ set, get, key }) => ({\n    //         ^store key\n    age: 0,\n    isSleeping: false,\n    increaseAge: () => set((state) => ({ age: state.age + 1 })),\n    reset: () => set({ age: 0, isSleeping: false }),\n  })\n);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStores } from '@esmo/react-utils';\n\ntype CatStoreKey = { catId: number };\ntype CatStore = { age: number; isSleeping: boolean; increaseAge: () => void; reset: () => void };\n\nconst useCatStores = createStores<CatStoreKey, CatStore>(\n  ({ set, get, key }) => ({\n    //         ^store key\n    age: 0,\n    isSleeping: false,\n    increaseAge: () => set((state) => ({ age: state.age + 1 })),\n    reset: () => set({ age: 0, isSleeping: false }),\n  })\n);\n")),(0,r.kt)("h2",{id:"using-a-stores-as-hook"},"Using a Stores as Hook"),(0,r.kt)("p",null,"We need to specify the store key (an object) as identifier."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{17,23}","{17,23}":!0},"function CatPage() {\n  const [catId, setCatId] = useState(1);\n\n  return (\n    <>\n      <div>Current cat id: {catId}</div>\n      <button onClick={() => setCatId((prev) => prev - 1)}>Prev cat</button>\n      <button onClick={() => setCatId((prev) => prev + 1)}>Next cat</button>\n\n      <Cat catId={catId} />\n      <Control catId={catId} />\n    </>\n  );\n}\n\nfunction Cat({ catId }) {\n  const { age } = useCatStores({ catId });\n  return <div>Cat's age: {age}</div>;\n}\n\nfunction Control({ catId }) {\n  const { increaseAge } = useCatStores(\n    { catId },\n    (state) => [state.increaseAge]\n  );\n  return <button onClick={increaseAge}>Increase cat's age</button>;\n}\n")),(0,r.kt)("h2",{id:"using-store-outside-component"},"Using Store Outside Component"),(0,r.kt)("p",null,"Reading/writing state and reacting to changes outside of components."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{2,7,12}","{2,7,12}":!0},"const alertCatAge = () => {\n  alert(useCatStore.get({ catId: 3 }).age);\n  //                      ^ get cat store with catId: 3\n};\n\nconst toggleIsSleeping = () => {\n  useCatStore.set({ catId: 7 }, (state) => ({ isSleeping: !state.isSleeping }));\n  //                ^ get cat store with catId: 7\n};\n\nconst unsub = useCatStore.subscribe(\n  { catId: 9 },\n  (state) => {\n    console.log('The value of age for catId 9 is changed!', state.age);\n  },\n  (state) => [state.age],\n);\n")),(0,r.kt)("h2",{id:"stores-methods"},"Stores Methods"),(0,r.kt)("p",null,"Stores method is a way to do something with the store outside of a component like what we've learned before."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{8,11,14,17}","{8,11,14,17}":!0},"import { createStore, createStores } from '@esmo/react-utils';\n\ntype State = { age: number }\nconst useCatStore  = createStore<State>(() => ({ age: 0 }));\nconst useFoxStores = createStores<{ id: string }, State>(() => ({ age: 0 }));\n\nconst getCatAge = () => useCatStore.get().age;\nconst getFoxAge = ({ id }) => useFoxStore.get({ id }).age;\n\nconst resetCatAge = () => useCatStore.set({ age: 0 });\nconst resetFoxAge = ({ id }) => useFoxStore.set({ id }, { age: 0 });\n\nconst subscribeCat = () => useCatStore.subscribe(console.log);\nconst subscribeFox = ({ id }) => useFoxStore.subscribe({ id }, console.log);\n\nconst getSubscribersOfCat = () => useCatStore.getSubscribers();\nconst getSubscribersOfFox = ({ id }) => useFoxStore.getSubscribers({ id });\n")),(0,r.kt)("p",null,"Stores-only (not available in ",(0,r.kt)("inlineCode",{parentName:"p"},"createStore"),") methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"useCatStores.getAll();\n// Returns array of store state\n\nuseCatStores.getAllWithSubscriber();\n// Returns array of store state, but only for stores with subscribers\n")),(0,r.kt)("h2",{id:"store-key"},"Store Key"),(0,r.kt)("p",null,"When using stores, the store key is a store identifier. It ",(0,r.kt)("strong",{parentName:"p"},"should")," be an object.\nThe default hashing mechanism is by sorting the object keys and stringify it.\nAnd of course we can customize it using ",(0,r.kt)("inlineCode",{parentName:"p"},"hashKeyFn")," option."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{14}","{14}":!0},'import {\n  createStores,\n  hashStoreKey, // Default hash function\n} from \'@esmo/react-utils\';\n\nconst useProductStores = createStores(\n  ({ get, set, key, keyHash }) => {\n    console.log(key, keyHash); // Check key (object) and keyHash (string)\n    return {\n      data: null,\n    };\n  },\n  {\n    hashKeyFn: myCustomHashFn, // Customize here\n  },\n);\n\nuseProductStores({ keyword: \'esmo\' });\n// Hash: \'{"id":"esmo"}\'\n\nuseProductStores({ keyword: \'esmo\', sort: \'asc\' });\n// Hash: \'{"id":"esmo","sort":"asc"}\'\n\nuseProductStores({ sort: \'asc\', keyword: \'esmo\' });\n// Hash: \'{"id":"esmo","sort":"asc"}\'\n')),(0,r.kt)("p",null,"If the hashed store key is same, it will use the same stored state."))}p.isMDXComponent=!0}}]);