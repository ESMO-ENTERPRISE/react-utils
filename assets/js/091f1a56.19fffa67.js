"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9172],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),d=a,y=p["".concat(u,".").concat(d)]||p[d]||f[d]||i;return n?r.createElement(y,o(o({ref:t},c),{},{components:n})):r.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2058:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:3},o="Infinite Query",s={unversionedId:"state/infinite-query",id:"state/infinite-query",title:"Infinite Query",description:"A Hook that can be used to fetch data infinitely. Unlike other Hooks, will not synchronize data across multiple Hooks with the same queryKey. Syntaxes are very similar to useInfiniteQuery Hook of react-query.",source:"@site/docs/state/infinite-query.md",sourceDirName:"state",slug:"/state/infinite-query",permalink:"/react-utils/docs/state/infinite-query",draft:!1,editUrl:"https://github.com/ESMO-ENTERPRISE/react-utils/tree/main/docs/state/infinite-query.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Query",permalink:"/react-utils/docs/state/query"},next:{title:"Experimental infinite query",permalink:"/react-utils/docs/state/experimental-infinite-query"}},u={},l=[{value:"Usage",id:"usage",level:2}],c={toc:l},p="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"infinite-query"},"Infinite Query"),(0,a.kt)("p",null,"A Hook that can be used to fetch data infinitely. Unlike other Hooks, will not synchronize data across multiple Hooks with the same ",(0,a.kt)("inlineCode",{parentName:"p"},"queryKey"),". Syntaxes are very similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"useInfiniteQuery")," Hook of ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@tanstack/react-query"},(0,a.kt)("inlineCode",{parentName:"a"},"react-query")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"useInfiniteQuery(queryKey, fetcher, options);\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Unlike ",(0,a.kt)("inlineCode",{parentName:"p"},"useQuery"),", this Hook will not synchronize data between of this Hooks. If you use this Hook in two components with the same ",(0,a.kt)("inlineCode",{parentName:"p"},"queryKey"),", unexpected behaviors will occur.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"If you want to update data of this Hooks via ",(0,a.kt)("inlineCode",{parentName:"p"},"setQueryData")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"setQueriesData"),", you should not pass ",(0,a.kt)("inlineCode",{parentName:"p"},"querySetter")," as a function. Instead, pass ",(0,a.kt)("inlineCode",{parentName:"p"},"array")," that represent a new page.")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'const fetchColors = ({  param  }) => {\n    return  fetch(`http://.../users?_limit=10&_page=${param.pageParam}`).then((res)  =>  res.json());\n};\n\nexport default function InfiniteQuery()  {\n\n    const { data: pages, fetchNextPage, hasNextPage, hasPreviousPage, isLoading, isFetching, isFetchingNextPage } = useInfiniteQuery("colors",  fetchColors,  {\n          getNextPageParam(_lastPage,  pages)  {\n            if (pages.length  <  4) {\n              return  pages.length  +  1;\n            }\n            return  undefined;\n          },\n          getPrevPageParam(_firstPage,  pages) {\n            if (pages.length  >  1) {\n              return  pages.length  -  1;\n            }\n            return  undefined;\n          });\n\n  if (isLoading) return  <div>Loading...</div>;\n\n  return (\n      <div>\n          {isFetching  &&  <p>Fetching...</p>}\n          {isFetchingNextPage  &&  <p>Fetching Next Page...</p>}\n          <div>\n              {pages?.map((page,  i)  => (\n                  <Fragment  key={i}>\n                      {\n                          page.map((color)  => (\n                              <h2  key={color.id}>\n                                  {color.id}. {color.label}\n                              </h2>\n                             ));\n                      }\n                  </Fragment>\n             ))}\n         </div>\n         <div>\n             <button onClick={fetchNextPage} disabled={!hasNextPage}>Load more</button>\n         </div>\n    </div>\n);\n}\n')))}f.isMDXComponent=!0}}]);