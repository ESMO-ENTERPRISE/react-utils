"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3986],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),h=a,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9014:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:1},o="Introduction",s={unversionedId:"query/introduction",id:"query/introduction",title:"Introduction",description:"With the power of createStores function, we can easily create a hook just like useQuery and useInfiniteQuery in TanStack-Query using createQuery function.",source:"@site/docs/query/introduction.md",sourceDirName:"query",slug:"/query/introduction",permalink:"/react-utils/docs/query/introduction",draft:!1,editUrl:"https://github.com/ESMO-ENTERPRISE/react-utils/tree/main/docs/query/introduction.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Query",permalink:"/react-utils/docs/category/query"},next:{title:"Single Query",permalink:"/react-utils/docs/query/single-query"}},l={},u=[{value:"Query State &amp; Network Fetching State",id:"query-state--network-fetching-state",level:2},{value:"Response Vs Data",id:"response-vs-data",level:2},{value:"Inherited from createStores",id:"inherited-from-createstores",level:2},{value:"Fresh &amp; Stale Query Concept",id:"fresh--stale-query-concept",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"With the power of ",(0,a.kt)("inlineCode",{parentName:"p"},"createStores")," function, we can easily create a hook just like ",(0,a.kt)("inlineCode",{parentName:"p"},"useQuery")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"useInfiniteQuery")," in ",(0,a.kt)("a",{parentName:"p",href:"https://tanstack.com/query"},"TanStack-Query")," using ",(0,a.kt)("inlineCode",{parentName:"p"},"createQuery")," function."),(0,a.kt)("p",null,"It can dedupe multiple request, handle caching, auto-update stale data, handle retry on error, handle infinite query, and many more.\nWith the flexibility given in ",(0,a.kt)("inlineCode",{parentName:"p"},"createStores"),", we can extend its power according to our needs."),(0,a.kt)("h2",{id:"query-state--network-fetching-state"},"Query State & Network Fetching State"),(0,a.kt)("p",null,"First of all, we need to understand the difference between these 2 types:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Query data state"),(0,a.kt)("li",{parentName:"ul"},"Network fetching state")),(0,a.kt)("p",null,"The query data state represented as ",(0,a.kt)("inlineCode",{parentName:"p"},"status"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"isLoading"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"isSuccess"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"isError"),".\nThese values has ",(0,a.kt)("strong",{parentName:"p"},"no relation")," with network fetching state. \u26a0\ufe0f"),(0,a.kt)("p",null,"For network fetching state, we use ",(0,a.kt)("inlineCode",{parentName:"p"},"isWaiting"),".\nThe value will be ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if the query is called and still waiting for the response.\nHere is the flow of both states:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"IMPORTANT NOTE:"),(0,a.kt)("br",null),"\nBy default, when ",(0,a.kt)("inlineCode",{parentName:"p"},"isWaiting")," value is changed, the subscribers or the component which use the hook ",(0,a.kt)("strong",{parentName:"p"},"will not be notified"),".\nWe can change this behavior by setting up the ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultDeps"),", or set it on specific component (in the dependency array)."),(0,a.kt)("h2",{id:"response-vs-data"},"Response Vs Data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { isSuccess, data, response } = useMyQuery();\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"response")," represents the untouched response returned from the async function.\nOn the other hand, the ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," represents the customized selection of the response obtained using the ",(0,a.kt)("inlineCode",{parentName:"p"},"select")," option.\nIf we didn't define the ",(0,a.kt)("inlineCode",{parentName:"p"},"select")," option, ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," will be equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"response"),"."),(0,a.kt)("h2",{id:"inherited-from-createstores"},"Inherited from createStores"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"createQuery")," function inherits functionality from the ",(0,a.kt)("inlineCode",{parentName:"p"},"createStores")," function, allowing us to perform the same result and actions available in ",(0,a.kt)("inlineCode",{parentName:"p"},"createStores"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const useMyQuery = createQuery(\n  fetchMyData,\n  {\n    // \ud83d\udc47 Same as createStores options\n    defaultDeps: undefined,\n    onFirstSubscribe: (state) => console.log('onFirstSubscribe', state),\n    onSubscribe: (state) => console.log('onSubscribe', state),\n    onUnsubscribe: (state) => console.log('onUnsubscribe', state),\n    onLastUnsubscribe: (state) => console.log('onLastUnsubscribe', state),\n    onBeforeChangeKey: (nextKey, prevKey) => console.log('Store key changed', nextKey, prevKey),\n\n    // ... other createQuery options (explained on next chapter)\n  },\n);\n")),(0,a.kt)("p",null,"Custom reactivity (dependency array):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"function QueryLoader() {\n  // This component doesn't care whether the query is success or error.\n  // It just listening to network fetching state. \ud83d\udc47\n  const { isWaiting } = useMyQuery((state) => [state.isWaiting]);\n  return <div>Is network fetching? {String(isWaiting)}</div>;\n}\n")),(0,a.kt)("p",null,"Actions outside component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useMyQuery.get( /* ... */ );\nuseMyQuery.set( /* ... */ );\nuseMyQuery.subscribe( /* ... */ );\nuseMyQuery.getSubscribers( /* ... */ );\n")),(0,a.kt)("h2",{id:"fresh--stale-query-concept"},"Fresh & Stale Query Concept"),(0,a.kt)("p",null,"A query categorized as a fresh or stale depends on the comparison between the stale time config and the current time.\nFor example, we use the default stale time, which is ",(0,a.kt)("strong",{parentName:"p"},"3 seconds"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const useMyQuery = createQuery(fetchMyData);\nconst { fetch, forceFetch } = useMyQuery.get();\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"07:00 AM")," \u2013 fetch the data"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"07:01 AM")," \u2013 get the response",(0,a.kt)("div",{className:"pt-2 text-sm"},"(Since stale time is 3 seconds, the query will be categorized as fresh until `07:04 AM`)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"07:02 AM to 07:04 AM")," \ud83d\udfe2 ",(0,a.kt)("em",{parentName:"li"},"fresh"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"By default, when a component which use the hook is mounted, the query function will not get invoked."),(0,a.kt)("li",{parentName:"ul"},"By default, when a window focus event triggered, the query function will not get invoked."),(0,a.kt)("li",{parentName:"ul"},"Calling ",(0,a.kt)("inlineCode",{parentName:"li"},"fetch()")," won't affect anything."),(0,a.kt)("li",{parentName:"ul"},"Calling ",(0,a.kt)("inlineCode",{parentName:"li"},"forceFetch()")," will call the query function."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"07:05 AM onwards")," \ud83d\udfe0 ",(0,a.kt)("em",{parentName:"li"},"stale"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"By default, when a component which use the hook is mounted, the query function will get invoked."),(0,a.kt)("li",{parentName:"ul"},"By default, when a window focus event triggered, the query function will get invoked.")))))}d.isMDXComponent=!0}}]);