"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7259],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),l=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(r),d=n,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return r?a.createElement(h,p(p({ref:t},c),{},{components:r})):a.createElement(h,p({ref:t},c))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,p=new Array(o);p[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:n,p[1]=i;for(var l=2;l<o;l++)p[l]=r[l];return a.createElement.apply(null,p)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4903:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_position:3},p="Path parameters",i={unversionedId:"router/path-parameter",id:"router/path-parameter",title:"Path parameters",description:"Non-exact paths can be matched using path parameters.",source:"@site/docs/router/path-parameter.md",sourceDirName:"router",slug:"/router/path-parameter",permalink:"/react-utils/docs/router/path-parameter",draft:!1,editUrl:"https://github.com/ESMO-ENTERPRISE/react-utils/tree/main/docs/router/path-parameter.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Route",permalink:"/react-utils/docs/router/route"},next:{title:"Match data",permalink:"/react-utils/docs/router/match-data"}},s={},l=[],c={toc:l},u="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"path-parameters"},"Path parameters"),(0,n.kt)("p",null,"Non-exact paths can be matched using path parameters."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"const User = () => {\n  const { params } = useRouteMatch();\n  return <div>UserID: {params.id}</div>;\n};\n\nconst App = () => {\n  return (\n    <Route path={'/user/:id'}>\n      <User />\n    </Route>\n  );\n};\n")),(0,n.kt)("p",null,"Parameter names can only contain letters, numbers, and underscores (",(0,n.kt)("inlineCode",{parentName:"p"},"_"),"). If two parameters with the same name are present, only the value for the last one will be captured."),(0,n.kt)("p",null,"Path parameters are never optional, and will (non-greedy) match everything up to the next forward slash (",(0,n.kt)("inlineCode",{parentName:"p"},"/"),")."),(0,n.kt)("p",null,"Because parameters are non-greedy, they can be separated by any character other than a number, letter, or underscore (eg. ",(0,n.kt)("inlineCode",{parentName:"p"},":foo-:bar"),"). However, If there is no separator between parameters (eg. ",(0,n.kt)("inlineCode",{parentName:"p"},":foo:bar"),"), every parameter except the last one will always be empty (",(0,n.kt)("inlineCode",{parentName:"p"},'""'),")."),(0,n.kt)("p",null,"A path may also end with a wildcard (",(0,n.kt)("inlineCode",{parentName:"p"},"/*"),"). Wildcards are only allowed at the end of a path, and must be preceded by a forward slash. The value matched by the wildcard is stored in ",(0,n.kt)("inlineCode",{parentName:"p"},'params["*"]'),". An asterisk (",(0,n.kt)("inlineCode",{parentName:"p"},"*"),") anywhere else else in the path is matched literally."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"const File = () => {\n  const { params } = useRouteMatch();\n  return <div>Filename: {params['*']}</div>;\n};\n\nconst App = () => {\n  return (\n    <Route path={'/file/*'}>\n      <File />\n    </Route>\n  );\n};\n")))}m.isMDXComponent=!0}}]);