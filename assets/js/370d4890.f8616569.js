"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[905],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(r),f=o,d=p["".concat(u,".").concat(f)]||p[f]||y[f]||a;return r?n.createElement(d,i(i({ref:t},s),{},{components:r})):n.createElement(d,i({ref:t},s))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5081:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>y,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:4},i="Network Mode",l={unversionedId:"query/network-mode",id:"query/network-mode",title:"Network Mode",description:'React-utils has no such "network mode" abstraction like TanStack-Query.',source:"@site/docs/query/network-mode.md",sourceDirName:"query",slug:"/query/network-mode",permalink:"/react-utils/docs/query/network-mode",draft:!1,editUrl:"https://github.com/ESMO-ENTERPRISE/react-utils/tree/main/docs/query/network-mode.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Single Query with Params",permalink:"/react-utils/docs/query/single-query-with-params"},next:{title:"Paginated or Infinite Query",permalink:"/react-utils/docs/query/paginated-infinite-query"}},u={},c=[{value:"Prevent Fetch When Offline",id:"prevent-fetch-when-offline",level:2},{value:"Prevent Retrying from Error When Offline",id:"prevent-retrying-from-error-when-offline",level:2},{value:"Set Globally",id:"set-globally",level:2}],s={toc:c},p="wrapper";function y(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"network-mode"},"Network Mode"),(0,o.kt)("p",null,'React-utils has no such "network mode" abstraction like ',(0,o.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/guides/network-mode"},"TanStack-Query"),'.\nBut, we can replicate the "network mode" functionality easily by utilizing its options.'),(0,o.kt)("p",null,"Note that by default, React-utils will call the query function without checking online status."),(0,o.kt)("h2",{id:"prevent-fetch-when-offline"},"Prevent Fetch When Offline"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{3,6-7}","{3,6-7}":!0},"const useMyQuery = createQuery(myQueryFn, {\n  enabled: (key) => {\n    if (!navigator.onLine) return false; // Prevent all fetch\n\n    // Or, allow initial fetch, but prevent refetch when offline\n    // const { isSuccess } = useMyQuery.get(key);\n    // if (isSuccess && !navigator.onLine) return false;\n\n    return true;\n  },\n});\n")),(0,o.kt)("h2",{id:"prevent-retrying-from-error-when-offline"},"Prevent Retrying from Error When Offline"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{3}","{3}":!0},"const useMyQuery = createQuery(myQueryFn, {\n  retry: () => {\n    if (!navigator.onLine) return 0; // No retry\n    return 1; // Retry once when online\n  },\n});\n")),(0,o.kt)("h2",{id:"set-globally"},"Set Globally"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createQuery as createQueryOriginal } from '@esmo/react-utils';\n\nexport const createQuery = (queryFn, options = {}) => {\n  const useQuery = createQueryOriginal(\n    queryFn,\n    {\n      ...options,\n      enabled: (key) => {\n        if (!navigator.onLine) return false;\n        return typeof options.enabled === 'function'\n          ? options.enabled(key)\n          : (options.enabled ?? true);\n      },\n      retry: (error, state) => {\n        if (!navigator.onLine) return 0;\n        return typeof options.retry === 'function'\n          ? options.retry(error, state)\n          : (options.retry ?? 1);\n      },\n    },\n  );\n  return useQuery;\n};\n")))}y.isMDXComponent=!0}}]);