"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3621],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,y=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(y,s(s({ref:t},l),{},{components:n})):r.createElement(y,s({ref:t},l))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5796:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:5},s="Query Magic",i={unversionedId:"state/query-magic",id:"state/query-magic",title:"Query Magic",description:"A Hook that can be used to control caches and network requests. Mostly uses to manage state.",source:"@site/docs/state/query-magic.md",sourceDirName:"state",slug:"/state/query-magic",permalink:"/react-utils/docs/state/query-magic",draft:!1,editUrl:"https://github.com/ESMO-ENTERPRISE/react-utils/tree/main/docs/state/query-magic.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Experimental infinite query",permalink:"/react-utils/docs/state/experimental-infinite-query"},next:{title:"Mutation",permalink:"/react-utils/docs/state/mutation"}},c={},u=[],l={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"query-magic"},"Query Magic"),(0,a.kt)("p",null,"A Hook that can be used to control caches and network requests. Mostly uses to manage state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"useQueryMagic();\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"You can use this Hook in optimistic updates")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Optimistic Update"),"\nAssume that ",(0,a.kt)("inlineCode",{parentName:"p"},"Pets")," component display a list of pets."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const fetcher = (context) => { //... your implementations };\nconst options = { cacheTime: 1000 * 60 * 10, ...};\n\nexport const Pets = (props) => {\n    const { data: pets, isFetching } = useQuery(`pets`, fetcher, options);\n    return (\n        <div>\n            {isFetching && <p>Fetching...</p>\n            {pets?.map(pet => {\n                // ... return your jsx\n            });\n        </div>\n    )\n}\n")),(0,a.kt)("p",null,"Somewhere in other components or within ",(0,a.kt)("inlineCode",{parentName:"p"},"Pets")," component :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const { setDataQuery, getDataQuery, cancelQuery, invalidateQuery } = useQueryMagic();\nconst { isMutating, mutate: addNewPet } = useMutation((newPet) => {\n        return fetch(url, { body: JSON.stringfy(newPet), ... }).then(res => res.json());\n      },\n      {\n        // this callback will be invoked before `mutator` function with the same argument.\n        onMutate(newPet) {\n          const prevPets = getDataQuery(`pets`);\n          // Cancel ongoing network request if it exists. So that there will not be like data conflicts due to optimistic update.\n          await cancelQuery(`pets`);\n          // Users will see immediate result before acutal mutation begins\n          setDataQuery(`pets`, (oldPets) => ({...oldPets, newPet});\n          // return context object\n          return { prevPets };\n        },\n        onError(_err, _newPet, context) {\n          // consumes context returned from onMutate callback. If mutation failed, set previous pets.\n          setDataQuery(`pets`, context.prevPets);\n        },\n        onSettled(_newPet, _error, context) {\n          // invalidate to ensure the data is fresh\n          invalidateQuery(`pets`);\n        }\n      });\nconst handleAddPet = (newPet) => {\n    addPet(newPet);\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Manage State"),"\n",(0,a.kt)("em",{parentName:"p"},"You can use ",(0,a.kt)("inlineCode",{parentName:"em"},"useQuery")," and ",(0,a.kt)("inlineCode",{parentName:"em"},"useQueryMagic")," to synchronize data between multiple components.")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Header.jsx")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'const { setQueryData } = useQueryMagic();\n// Function that synchronize data(theme) between multiple components\nconst toggleTheme = () => setQueryData("theme", (light) => !light);\n')),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Profile.jsx")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'const { data: theme } = useQuery("theme", undefined, {\n  autoFetchEnabled: false,\n}); // Don\'t forget to disable autoFetchEnabled\n')),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Settings.jsx")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'const { data: theme } = useQuery("theme", undefined, {\n  autoFetchEnabled: false,\n});\n')))}m.isMDXComponent=!0}}]);