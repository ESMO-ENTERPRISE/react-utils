"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[608],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(t),g=a,m=l["".concat(c,".").concat(g)]||l[g]||d[g]||i;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[l]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},9116:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:5},o="Paginated or Infinite Query",s={unversionedId:"query/paginated-infinite-query",id:"query/paginated-infinite-query",title:"Paginated or Infinite Query",description:"Creating the Store/Hook",source:"@site/docs/query/paginated-infinite-query.md",sourceDirName:"query",slug:"/query/paginated-infinite-query",permalink:"/react-utils/docs/query/paginated-infinite-query",draft:!1,editUrl:"https://github.com/ESMO-ENTERPRISE/react-utils/tree/main/docs/query/paginated-infinite-query.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Network Mode",permalink:"/react-utils/docs/query/network-mode"},next:{title:"Dependent Queries",permalink:"/react-utils/docs/query/dependent-queries"}},c={},p=[{value:"Creating the Store/Hook",id:"creating-the-storehook",level:2},{value:"Using Query Hook Inside a Component",id:"using-query-hook-inside-a-component",level:2},{value:"Bi-Directional Infinite List",id:"bi-directional-infinite-list",level:2}],u={toc:p},l="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(l,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"paginated-or-infinite-query"},"Paginated or Infinite Query"),(0,a.kt)("h2",{id:"creating-the-storehook"},"Creating the Store/Hook"),(0,a.kt)("p",null,'Rendering list of items with a "load more" feature is a very common UI pattern.\nTo achieve this "load more" functionality, we can set the ',(0,a.kt)("inlineCode",{parentName:"p"},"getNextPageParam")," option to determine what next offset or cursor is,\nand then use the last page param on query function.\nLastly, we need to utilize ",(0,a.kt)("inlineCode",{parentName:"p"},"select")," option to concat the previous data with the new response."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{2,9-11}","{2,9-11}":!0},"const usePokemonsQuery = createQuery(\n  async (_, { pageParam = 0 }) => {\n    const res = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=10&offset=${pageParam}`);\n    if (res.ok) return res.json();\n    throw res;\n  },\n  {\n    select: (response, { data = [] }) => [...data, ...response.results],\n    getNextPageParam: ({ pagination }) => (\n      pagination.totalPages > pagination.currentPage ? (pagination.currentPage + 1) : undefined;\n    ),\n    // Or if we use cursor:\n    // getNextPageParam: (lastPageResponse) => lastPageResponse.cursor,\n  },\n);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{6,13-15}","{6,13-15}":!0},"type PokemonsResponse = { results: Pokemon[]; success: boolean }\ntype Pokemon = { id: number; name: string };\n\nconst usePokemonsQuery = createQuery<undefined, PokemonsResponse, Pokemon[]>(\n  //                                 ^key       ^response         ^data (from select)\n  async (_, { pageParam = 0 }) => {\n    const res = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=10&offset=${pageParam}`);\n    if (res.ok) return res.json();\n    throw res;\n  },\n  {\n    select: (response, { data = [] }) => [...data, ...response.results],\n    getNextPageParam: ({ pagination }) => (\n      pagination.totalPages > pagination.currentPage ? (pagination.currentPage + 1) : undefined;\n    ),\n    // Or if we use cursor:\n    // getNextPageParam: (lastPageResponse) => lastPageResponse.cursor,\n  },\n);\n")),(0,a.kt)("p",null,"In order to tell React-utils that we already reached at the end of page, return ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"null")," on ",(0,a.kt)("inlineCode",{parentName:"p"},"getNextPageParam"),".\nAfter doing that, the ",(0,a.kt)("inlineCode",{parentName:"p"},"hasNextPage")," will be ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"fetchNextPage")," will no longer triggering anything."),(0,a.kt)("h2",{id:"using-query-hook-inside-a-component"},"Using Query Hook Inside a Component"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{13}","{13}":!0},"function PokemonListPage() {\n  const { data, fetchNextPage, hasNextPage, isWaitingNextPage } = usePokemonsQuery();\n\n  return (\n    <div>\n      {data?.map((pokemon) => (\n        <div key={pokemon.name}>{pokemon.name}</div>\n      ))}\n\n      {isWaitingNextPage ? (\n        <div>Loading more...</div>\n      ) : (\n        hasNextPage && <button onClick={fetchNextPage}>Load more</button>\n      )}\n    </div>\n  );\n}\n")),(0,a.kt)("h2",{id:"bi-directional-infinite-list"},"Bi-Directional Infinite List"),(0,a.kt)("p",null,"Creating bi-directional query is possible by creating 2 infinite queries and merge its data together.\nHowever, we must prevent fetching the initial page 2 times and handle 2 queries refetch simultaneously.\nTherefore, react-utils provide an abstraction to do that using ",(0,a.kt)("inlineCode",{parentName:"p"},"createBiDirectionQuery"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createBiDirectionQuery } from '@esmo/react-utils';\n\nconst fetchProjects = async (cursor) => {\n  const res = await fetch(`/api/projects?cursor=${cursor}`);\n  const resJson = await res.json();\n  if (res.ok) return resJson;\n  throw resJson;\n};\n\nconst useProjectsQuery = createBiDirectionQuery(\n  (queryKey, { pageParam }, direction) => fetchProjects(pageParam || 0),\n  //                        ^? (parameter) direction: \"prev\" | \"next\"\n  {\n    select: (response, { data = [] }, direction) => {\n      return direction === 'prev' ? response.data.concat(data) : data.concat(response.data);\n    },\n    getPrevPageParam: (response) => response.previousId,\n    getNextPageParam: (response) => response.nextId,\n  },\n);\n\nfunction MyPage() {\n  const {\n    data,\n    fetchPrevPage, hasPrevPage, isWaitingPrevPage,\n    fetchNextPage, hasNextPage, isWaitingNextPage,\n  } = useProjectsQuery();\n\n  ...\n}\n")))}d.isMDXComponent=!0}}]);