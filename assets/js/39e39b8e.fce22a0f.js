"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9166],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(r),y=i,f=p["".concat(u,".").concat(y)]||p[y]||d[y]||o;return r?n.createElement(f,a(a({ref:t},l),{},{components:r})):n.createElement(f,a({ref:t},l))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=y;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},3363:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const o={sidebar_position:7},a="Initial Query Data (SSR/SSG)",s={unversionedId:"query/initial-query-data",id:"query/initial-query-data",title:"Initial Query Data (SSR/SSG)",description:"Sometimes, we want to fetch our data on server-side,",source:"@site/docs/query/initial-query-data.md",sourceDirName:"query",slug:"/query/initial-query-data",permalink:"/react-utils/docs/query/initial-query-data",draft:!1,editUrl:"https://github.com/ESMO-ENTERPRISE/react-utils/tree/main/docs/query/initial-query-data.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Dependent Queries",permalink:"/react-utils/docs/query/dependent-queries"},next:{title:"Error Retries",permalink:"/react-utils/docs/query/error-retries"}},u={},c=[],l={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"initial-query-data-ssrssg"},"Initial Query Data (SSR/SSG)"),(0,i.kt)("p",null,"Sometimes, we want to fetch our data on server-side,\neither doing it on every request (like Next.js' ",(0,i.kt)("inlineCode",{parentName:"p"},"getServerSideProps"),") or at build-time (like Next.js' ",(0,i.kt)("inlineCode",{parentName:"p"},"getStaticProps"),").\nWe can populate the initial response data easily by utilizing ",(0,i.kt)("inlineCode",{parentName:"p"},"setInitialResponse")," method.\nNote that this ",(0,i.kt)("inlineCode",{parentName:"p"},"setInitialResponse")," method should be called on top of your component tree, or before any component invokes the hook (a.k.a subscribe the query)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// Single query\nconst usePopularProductQuery = createQuery(fetchPopularProduct);\nconst useProductDetailQuery = createQuery(fetchProductDetail); // With dynamic param\n\n// Infinite query\nconst useNotificationsQuery = createQuery(\n  (_, { pageParam }) => fetchNotifications(pageParam),\n  { getNextPageParam: (lastPageResponse) => lastPageResponse.cursor },\n);\n\nexport async function getServerSideProps() {\nconst popularProduct = await fetchPopularProduct();\nconst productDetail = await fetchProductDetail({ id: 3 });\nconst notifications = await fetchNotifications();\n  return {\n    props: {\n      popularProduct,\n      productDetail,\n      notifications,\n    }\n  }\n}\n\nexport default function Page({ popularProduct, productDetail, notifications }) {\n  // The setInitialResponse method must be placed on the top or before any component subscribe to the query.\n  // These setInitialResponse method will only run once.\n  usePopularProductQuery.setInitialResponse({ response: popularProduct });\n  useProductDetailQuery.setInitialResponse({ response: productDetail, key: { id: 3 } });\n  useNotificationsQuery.setInitialResponse({ response: notifications, skipRevalidation: true });\n  //                                                                  ^if we don't want to revalidate on client-side\n\n  return <main> ... </main>\n}\n")))}d.isMDXComponent=!0}}]);