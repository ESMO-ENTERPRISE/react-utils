"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1423],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,y=p["".concat(s,".").concat(d)]||p[d]||f[d]||a;return n?r.createElement(y,i(i({ref:t},l),{},{components:n})):r.createElement(y,i({ref:t},l))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7288:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:14},i="Window Focus Refetching",c={unversionedId:"query/windows-focus-refetching",id:"query/windows-focus-refetching",title:"Window Focus Refetching",description:"React Native",source:"@site/docs/query/windows-focus-refetching.md",sourceDirName:"query",slug:"/query/windows-focus-refetching",permalink:"/react-utils/docs/query/windows-focus-refetching",draft:!1,editUrl:"https://github.com/ESMO-ENTERPRISE/react-utils/tree/main/docs/query/windows-focus-refetching.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"Optimistic Update",permalink:"/react-utils/docs/query/optimistic-update"},next:{title:"Auto Refetching / Polling",permalink:"/react-utils/docs/query/polling"}},s={},u=[{value:"React Native",id:"react-native",level:2},{value:"Set Globally",id:"set-globally",level:2}],l={toc:u},p="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"window-focus-refetching"},"Window Focus Refetching"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{2}","{2}":!0},"const useProductsQuery = createQuery(getProducts, {\n  fetchOnWindowFocus: false, // To disable window focus (re)fetch\n});\n")),(0,o.kt)("h2",{id:"react-native"},"React Native"),(0,o.kt)("p",null,'In React Native, there is no such "window" focus event.\nThrefore, we need to disable the ',(0,o.kt)("inlineCode",{parentName:"p"},"fetchOnWindowFocus"),".\nTo trigger refetch when a screen is focused, we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"useFocusEffect")," hook."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useFocusEffect } from '@react-navigation/native';\n\nconst useProductsQuery = createQuery(getProducts, {\n  fetchOnWindowFocus: false,\n});\nconst refetchProductQuery = useProductsQuery.get().fetch;\n\nfunction Profile({ userId }) {\n  useFocusEffect(\n    refetchProductQuery\n  );\n\n  ...\n}\n")),(0,o.kt)("h2",{id:"set-globally"},"Set Globally"),(0,o.kt)("p",null,"If we want to modify the default ",(0,o.kt)("inlineCode",{parentName:"p"},"fetchOnWindowFocus")," option, we can just create our own ",(0,o.kt)("inlineCode",{parentName:"p"},"createQuery")," function like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createQuery as createQueryOriginal } from '@esmo/react-utils';\n\nexport const createQuery = (queryFn, options = {}) => {\n  return createQueryOriginal(queryFn, {\n    ...options,\n    fetchOnWindowFocus: false,\n  });\n};\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import {\n  CreateQueryOptions,\n  QueryState,\n  StoreKey,\n  createQuery as createQueryOriginal,\n} from '@esmo/react-utils';\n\nexport const createQuery = <\n  TKey extends StoreKey = StoreKey,\n  TResponse = any,\n  TData = TResponse,\n  TError = unknown,\n>(\n  queryFn: (key: TKey, state: QueryState<TKey, TResponse, TData, TError>) => Promise<TResponse>,\n  options: Omit<CreateQueryOptions<TKey, TResponse, TData, TError>, 'fetchOnWindowFocus'> = {},\n) => {\n  return createQueryOriginal(queryFn, {\n    ...options,\n    fetchOnWindowFocus: false,\n  });\n};\n")))}f.isMDXComponent=!0}}]);