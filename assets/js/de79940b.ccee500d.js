"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2538],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,f=p["".concat(u,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:6},i="Mutation",s={unversionedId:"state/mutation",id:"state/mutation",title:"Mutation",description:"A Hook that can be used to mutate remote data. Very similar to useMutation Hook of react-query.",source:"@site/docs/state/mutation.md",sourceDirName:"state",slug:"/state/mutation",permalink:"/react-utils/docs/state/mutation",draft:!1,editUrl:"https://github.com/ESMO-ENTERPRISE/react-utils/tree/main/docs/state/mutation.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Query Magic",permalink:"/react-utils/docs/state/query-magic"},next:{title:"Store",permalink:"/react-utils/docs/category/store"}},u={},c=[{value:"Usage",id:"usage",level:2}],l={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mutation"},"Mutation"),(0,a.kt)("p",null,"A Hook that can be used to mutate remote data. Very similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"useMutation")," Hook of ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@tanstack/react-query"},(0,a.kt)("inlineCode",{parentName:"a"},"react-query")),"."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const { isMutating, mutate: addNewPet } = useDataMutation((newPet) => {\n      return fetch(url, { body: JSON.stringfy(newPet), ... }).then(res => res.json());\n    },\n    {\n      // this callback will be invoked before `mutator` function with the same argument.\n      onMutate(newPet) {\n        const prevPets = getDataQuery(`pets`);\n        // Cancel ongoing network request if it exists. So that there will not be like data conflicts due to optimistic update.\n        await cancelQuery(`pets`);\n        // Users will see immediate result before acutal mutation begins\n        setDataQuery(`pets`, (oldPets) => ({...oldPets, newPet});\n        // return context object\n        return { prevPets };\n      },\n      onError(_err, _newPet, context) {\n        // consumes context returned from onMutate callback. If mutation failed, set previous pets.\n        setDataQuery(`pets`, context.prevPets);\n      },\n      onSettled(_newPet, _error, context) {\n        // invalidate to ensure the data is fresh\n        invalidateQuery(`pets`);\n      }\n    });\n")))}m.isMDXComponent=!0}}]);