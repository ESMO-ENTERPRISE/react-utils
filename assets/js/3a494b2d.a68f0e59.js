"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2673],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,y=p["".concat(c,".").concat(d)]||p[d]||l[d]||a;return n?r.createElement(y,s(s({ref:t},m),{},{components:n})):r.createElement(y,s({ref:t},m))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3721:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:3},s="Single Query with Params",i={unversionedId:"query/single-query-with-params",id:"query/single-query-with-params",title:"Single Query with Params",description:"Sometimes we need to fetch data with some parameters. We want the parameters to be dynamic.",source:"@site/docs/query/single-query-with-params.md",sourceDirName:"query",slug:"/query/single-query-with-params",permalink:"/react-utils/docs/query/single-query-with-params",draft:!1,editUrl:"https://github.com/ESMO-ENTERPRISE/react-utils/tree/main/docs/query/single-query-with-params.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Single Query",permalink:"/react-utils/docs/query/single-query"},next:{title:"Network Mode",permalink:"/react-utils/docs/query/network-mode"}},c={},u=[],m={toc:u},p="wrapper";function l(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"single-query-with-params"},"Single Query with Params"),(0,o.kt)("p",null,"Sometimes we need to fetch data with some parameters. We want the parameters to be dynamic.\nEvery parameters combination might resolve to a different response, and each of them should store a different state."),(0,o.kt)("p",null,'For example, we have a pokemon detail endpoint that accept a pokemon name.\nWe need a query state for each pokemon name.\nThere should be a possibility where the "charmander" pokemon query is still fetching,\nthe "squirtle" pokemon query data has been fetched, and the "bulbasaur" pokemon query needs to be reset.'),(0,o.kt)("p",null,"To achieve this, we use ",(0,o.kt)("a",{parentName:"p",href:"/docs/store/introduction"},"store key")," like what we have learned before.\nThe query function will receive the store key as its parameter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{2,12}","{2,12}":!0},"const usePokemonQuery = createQuery(\n  async ({ pokemon }) => {\n    //     ^store key\n    const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${pokemon}`);\n    if (res.ok) return res.json();\n    throw res;\n  }\n);\n\nfunction PokemonsPage() {\n  const [currentPokemon, setCurrentPokemon] = useState();\n  const { isSuccess, data } = usePokemonQuery({ pokemon: currentPokemon });\n  //                                            ^store key\n\n  return (\n    <main>\n      {isSuccess ? (\n        <section>\n          <h1>{data.name}</h1>\n          <div>Weight: {data.weight}</div>\n        </section>\n      ) : (\n        <div>Loading...</div>\n      )}\n\n      <PokemonList onSelectPokemon={setCurrentPokemon} />\n    </main>\n  );\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{3,13}","{3,13}":!0},"type Pokemon = { id: string; name: string; weight: number };\nconst usePokemonQuery = createQuery<{ pokemon: string }, Pokemon>(\n  async ({ pokemon }) => {\n    //     ^store key\n    const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${pokemon}`);\n    if (res.ok) return res.json();\n    throw res;\n  }\n);\n\nfunction PokemonsPage() {\n  const [currentPokemon, setCurrentPokemon] = useState();\n  const { isSuccess, data } = usePokemonQuery({ pokemon: currentPokemon });\n  //                                            ^store key\n\n  return (\n    <main>\n      {isSuccess ? (\n        <section>\n          <h1>{data.name}</h1>\n          <div>Weight: {data.weight}</div>\n        </section>\n      ) : (\n        <div>Loading...</div>\n      )}\n\n      <PokemonList onSelectPokemon={setCurrentPokemon}>\n    </main>\n  );\n}\n")),(0,o.kt)("p",null,"Get data or do something outside component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const getDitto = () => {\n  console.log(usePokemonQuery.get({ pokemon: 'ditto' }).data);\n  //                                ^store key\n};\n\nconst resetDitto = () => {\n  usePokemonQuery.get({ pokemon: 'ditto' }).reset();\n};\n")))}l.isMDXComponent=!0}}]);