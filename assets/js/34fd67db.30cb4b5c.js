"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8420],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),l=p(n),f=a,y=l["".concat(u,".").concat(f)]||l[f]||d[f]||o;return n?r.createElement(y,s(s({ref:t},c),{},{components:n})):r.createElement(y,s({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=f;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[l]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2494:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},s="Query",i={unversionedId:"state/query",id:"state/query",title:"Query",description:"A Hook to make developer's life easier. This Hook will help you in fetching data and keep you away from handling caches. You don't need to implement imperative stuffs. You can also use this Hook to manage state. Other Hooks, except useMutation, were built on top of this Hook.",source:"@site/docs/state/query.md",sourceDirName:"state",slug:"/state/query",permalink:"/react-utils/docs/state/query",draft:!1,editUrl:"https://github.com/ESMO-ENTERPRISE/react-utils/tree/main/docs/state/query.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/react-utils/docs/state/introduction"},next:{title:"Infinite Query",permalink:"/react-utils/docs/state/infinite-query"}},u={},p=[],c={toc:p},l="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(l,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"query"},"Query"),(0,a.kt)("p",null,"A Hook to make developer's life easier. This Hook will help you in fetching data and keep you away from handling caches. You don't need to implement imperative stuffs. You can also use this Hook to manage state. Other Hooks, except ",(0,a.kt)("inlineCode",{parentName:"p"},"useMutation"),", were built on top of this Hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"useQuery(queryKey, fetcher?, options?)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parallel Data Query")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'const { data: users } = useQuery("users", fetcher, options);\nconst { data: pets } = useQuery("pets", fetcher, options);\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Dependent Data Query"),"\n",(0,a.kt)("em",{parentName:"p"},"Fetch channel after the user becomes available")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'const { data: user } = useQuery(`user`, fetcher, options);\nconst { data: channel } = useQuery(["channel", user?.id], fetcher, {\n  autoFetchEnabled: !!user?.id,\n});\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Paginated Data Query")),(0,a.kt)("p",null,"You can fetch paginated data using this Hook. For example :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'const fetcher = (context) => {\n  const { queryKey } = context;\n  return fetch(`https://.../pets?page=${queryKey[1]}`).then((res) =>\n    res.json()\n  );\n};\n\n// To keep previous value until the data for the next page is ready\nconst options = { keepValueOnKeyChanges: true };\nexport const Pets = (props) => {\n  const [page, setPage] = useState(0);\n  const { data: pets, isFetching } = useQuery(\n    [`pets`, page],\n    fetcher,\n    options\n  );\n\n  return (\n    <div>\n      {isFetching && <p class="status">Fetching...</p>}\n      <button onClick={() => setPage((p) => p + 1)}>Next</button>\n      <button onClick={() => setPage((p) => p - 1)}>Prev</button>\n      <div>\n        {pets?.map((pet) => {\n          // return your jsx\n        })}\n      </div>\n    </div>\n  );\n};\n')))}d.isMDXComponent=!0}}]);